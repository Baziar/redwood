name: Build Test-project and Run CLI Commands

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  cypress-run:
    if: github.repository == 'redwoodjs/redwood'
    strategy:
      matrix:
        os: ['ubuntu-latest']
        node-version: ['16']
      fail-fast: true
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} | Node ${{ matrix.node-version }} latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Cache yarn
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Create a temporary directory
        id: createpath
        run: |
          project_path=$(mktemp -d -t redwood.XXXXXX)
          echo "::set-output name=project_path::$project_path"
          framework_path=$(pwd)
          echo "::set-output name=framework_path::$framework_path"

      - name: Create a Test-project with Linked Packages
        run: yarn build:test-project ${{ steps.createpath.outputs.project_path }} --link

      # - name: Run `rw data-migrate install`
      #   run: yarn rw data-migrate install
      #   working-directory: ${{ steps.createpath.outputs.project_path }}

      # - name: Run `rw setup auth netlify`
      #   run: yarn rw setup auth netlify
      #   working-directory: ${{ steps.createpath.outputs.project_path }}

      # - name: Run `rw setup deploy vercel` (no prerender)
      #   run: yarn rw setup deploy vercel
      #   working-directory: ${{ steps.createpath.outputs.project_path }}

      # - name: Run `rw lint`
      #   run: yarn rw lint
      #   working-directory: ${{ steps.createpath.outputs.project_path }}

# rw build
# rw serve
# rw setup ui tailwindcss and chakra-ui
